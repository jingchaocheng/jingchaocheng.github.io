<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingchao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.chengjingchao.com/"/>
  <updated>2020-08-02T16:12:32.015Z</updated>
  <id>https://www.chengjingchao.com/</id>
  
  <author>
    <name>Jingchao Cheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写在连续跑步 99 周</title>
    <link href="https://www.chengjingchao.com/2020/07/27/%E5%86%99%E5%9C%A8%E8%BF%9E%E7%BB%AD%E8%B7%91%E6%AD%A5-99-%E5%91%A8/"/>
    <id>https://www.chengjingchao.com/2020/07/27/%E5%86%99%E5%9C%A8%E8%BF%9E%E7%BB%AD%E8%B7%91%E6%AD%A5-99-%E5%91%A8/</id>
    <published>2020-07-26T16:14:15.000Z</published>
    <updated>2020-08-02T16:12:32.015Z</updated>
    
    <content type="html"><![CDATA[<p>从 2018 年的第 36 周 - 2020 年的第 30 周，达成连续跑步 99 周悦跑圈成就。<br>基本可以代表我来深圳有多久了。</p><h1 id="我的跑步经历"><a href="#我的跑步经历" class="headerlink" title="我的跑步经历"></a>我的跑步经历</h1><p>从 2016 年 4 月 1 日，开始跑步并且记录，至今差不多 4 年多了。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最开始为啥要跑步，应该是当时在学校和室友几个一起商量早上起早跑步，然后就跑起来了。商量好的明天跑步，结果你早上不想起来，也有人早上一起叫你，也就不好意思再继续睡了。有伴一起跑，也就不知不觉养成习惯了。当时的跑步路线基本都在学校操场 3 - 5km，周末可能会一起去学校旁边的一个景区跑远一点 10km。</p><p>第一次参加跑步活动<br><img src="/img/life/running2.jpg" alt="running"><br><img src="/img/life/running.jpg" alt="running"></p><p>中间有过一段时间的全勤，后来以为膝盖受伤就跑的很少了。<br><img src="/img/life/running4.jpg" alt="running"></p><p>后来 17 年去厦门工作，基本维持一周一次的跑步频率。</p><p>再后来到了深圳，找到工作后，就又开始跑起来了，达到连续跑步 20 多周的时候便开始在意保持下去。</p><p>18 年 8 月 24 第一次突破半马，中间跟着一个大哥跑了很久。（谢谢那位大哥）</p><p>19年 8 月 - 9 月 开始健身撸铁，为了少做有氧，就减少了跑量，那一两个月每次只跑了 500 - 1000m 。</p><p>现在的跑步状态基本 10 km+</p><p>从最开始跑步到现在的数据记录<br><img src="/img/life/running3.jpg" width = "300"/></p><hr/><h1 id="跑步装备"><a href="#跑步装备" class="headerlink" title="跑步装备"></a>跑步装备</h1><p>装备基本就是鞋可能挑一点，衣服倒无所谓。最开始跑步就穿的运动鞋校服。后来买了两双跑鞋，我应该不算是个装备党。</p><p>我买过的两双跑鞋</p><ul><li>Asics GT-2000 6</li><li>Adidas UltraBOOST 4.0</li></ul><p>新手入门可以买各大品牌的基础款跑鞋，先跑起来。后面再根据自己情况选择注重竞速的还是缓震的等等。</p><p>也许今年会买个运动手表⌚️，到时候可以写个评测。</p><hr/><h1 id="跑步路线"><a href="#跑步路线" class="headerlink" title="跑步路线"></a>跑步路线</h1><p>体育馆、公园、景区、人行道和学校操场都跑过。现在的运动类软件基本都有附近的跑步路线推荐。</p><p>操场的好处</p><ul><li>橡胶跑道</li><li>跑不动了还可以跟着别人后面再坚持坚持✊</li></ul><hr/><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>跑步对我来说并不感到痛苦，并且也算是可以最直接得到正向反馈的一种运动方式。一方面身体会分泌激素，另一方面今天的配速比昨天快一点/距离比昨天远一点等。都是特别直接的自我激励，有了持续的正向反馈，也就很容易坚持下去。</p><p>期待有机会突破 <strong>42.195</strong> 的那一天。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从 2018 年的第 36 周 - 2020 年的第 30 周，达成连续跑步 99 周悦跑圈成就。&lt;br&gt;基本可以代表我来深圳有多久了。&lt;/p&gt;
&lt;h1 id=&quot;我的跑步经历&quot;&gt;&lt;a href=&quot;#我的跑步经历&quot; class=&quot;headerlink&quot; title=&quot;我的跑步
      
    
    </summary>
    
    
      <category term="生活" scheme="https://www.chengjingchao.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://www.chengjingchao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 与 Vim</title>
    <link href="https://www.chengjingchao.com/2020/06/13/VS-Code-%E4%B8%8E-Vim/"/>
    <id>https://www.chengjingchao.com/2020/06/13/VS-Code-%E4%B8%8E-Vim/</id>
    <published>2020-06-12T17:15:46.000Z</published>
    <updated>2020-08-02T17:19:29.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><blockquote><p>Vim 是从 vi 发展出来的一个文本编辑器。和 Emacs 并列成为类 Unix 系统用户最喜欢的编辑器。</p></blockquote><p><code>Vim</code> 提供了一系列很强大的编辑文本的操作方式，可以使用纯键盘完成编辑文本操作。再搭配许多插件可以配置成一个 IDE。但是 <code>Vim</code> 有着一个比较陡峭的学习曲线，并且不是开箱即用的。</p><p>如果没有特定的开发环境限制，可以使用</p><p>更漂亮易上手的编辑器 <code>(Visual Studio Code)</code> + 更流畅的编辑体验 <code>(Vim)</code></p><p>来提高编码效率，各取所长。</p><p>如今市面上几乎所有的 IDE 和编辑器都提供有 Vim 的相关插件。例如我所体验过的</p><ul><li>Sublime Text - <a href="https://github.com/guillermooo/Vintageous" target="_blank" rel="noopener">Vintageous</a>、<a href="https://github.com/guillermooo/Six" target="_blank" rel="noopener">Six</a></li><li>Visual Studio - <a href="https://github.com/VsVim/VsVim" target="_blank" rel="noopener">VsVim</a></li><li>Visual Studio Code - <a href="https://github.com/VSCodeVim/Vim" target="_blank" rel="noopener">Vim</a></li></ul><p>本文的所有操作都基于 <code>Visual Studio Code</code> +  <code>Vim 插件</code> 演示。(虽然我更喜欢 Sublime Text…)</p><hr><h1 id="先来点甜头-例子"><a href="#先来点甜头-例子" class="headerlink" title="先来点甜头 例子"></a>先来点甜头 例子</h1><p>举例几个实际例子，可以想像之前是怎么操作的</p><ol><li><p>字母顺序写反了 <code>ab</code> 写成了 <code>ba</code><br><img src="/img/vim/xp.gif" alt="running"></p></li><li><p>删除 HTML 元素中的内容 / 删除双引号之间的内容<br><img src="/img/vim/dit.gif" alt="running"></p></li></ol><p>…</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>打开 VS Code 的扩展商店</li><li>搜索 Vim</li><li>点击安装</li></ol><p><img src="/img/vim/vim-install.jpg" alt="running"></p><h1 id="Vim-模式"><a href="#Vim-模式" class="headerlink" title="Vim 模式"></a>Vim 模式</h1><p>模式意味着你的键盘会根据你所使用的模式获得不同的功能。也就是说，根据你所使用的模式，在键盘上键入一个按键会产生不同结果。</p><p>就像主键盘区上方的数字健可以直接按数字键 <code>1</code> 输入 1 也可以通过 <code>shift + 1</code> 输入 <code>！</code>，这样一个健位上就具有了不同的功能。</p><p>常用模式</p><ul><li><code>normal</code> 模式—— <strong>默认模式</strong>，可以通过键盘移动光标、删除字符、复制、粘贴等。</li><li><code>insert</code> 模式—— 正常的输入模式</li><li><code>visual</code> 模式—— 选中文本，类似通过鼠标选择文本</li></ul><p><code>Vim</code> 插件安装完成后，默认是 <code>normal</code> 模式，<code>normal</code> 模式下不能输入文本。按 <code>i</code> 键切换到 <code>insert</code> 模式。</p><p>如何判断编辑器当前所处模式</p><ul><li>通过光标样式判断</li><li>VS Code 底部 status 栏会显示当前模式</li></ul><p><img src="/img/vim/vscode-status.jpg" alt="running"></p><p>安装 Vim 后的副作用</p><ul><li><code>Ctrl + c</code> 不再是复制，而是切换到 <code>normal</code> 模式</li><li><code>Ctrl + v</code> 不再是粘贴，而是进入 <code>visual</code> 模式</li><li><code>Ctrl + f</code> 不再是搜索，而是向前滚动一页</li></ul><p>如果不希望 vim 改变这些健</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁用 vim 使用 Ctrl</span></span><br><span class="line"><span class="string">"vim.useCtrlKeys"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者更精细地控制 Vim 启用或禁用的映射，自行取舍。</span></span><br><span class="line"><span class="string">"vim.handleKeys"</span>: &#123;</span><br><span class="line">  <span class="string">"&lt;C-w&gt;"</span>: <span class="literal">false</span>, <span class="comment">// 禁用 Vim 使用 Ctrl w</span></span><br><span class="line">  <span class="string">"&lt;C-o&gt;"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"&lt;C-n&gt;"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h2><p>insert 切换 normal</p><ul><li><code>Esc</code></li><li><code>Ctrl + c</code></li><li><code>Ctrl + [</code></li></ul><p>normal 切换 insert</p><ul><li><code>i(insert)</code> 在当前字符前进入 <code>insert</code> 模式</li><li><code>a(append)</code> 在当前字符后进入 <code>insert</code> 模式</li><li><code>o(open)</code> 在当前行下开启新的一行进入 <code>insert</code> 模式</li><li><code>I</code> 在行首进入 <code>insert</code> 模式</li><li><code>A</code> 在行尾进入 <code>insert</code> 模式</li><li><code>O</code> 在当前行上开启新的一行进入 <code>insert</code> 模式</li><li><code>gi</code> 在最后一次 <code>insert</code> 的地方进入 <code>insert</code> 模式</li></ul><h2 id="normal-模式"><a href="#normal-模式" class="headerlink" title="normal 模式"></a>normal 模式</h2><p><code>normal</code> 模式下 <code>hjkl</code> 可以像键盘上的方向键一样上下左右移动光标而不是输入。<code>hjkl</code> 适用于短距离移动。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      ↑</span><br><span class="line">← h j k l →</span><br><span class="line">    ↓</span><br></pre></td></tr></table></figure><p><img src="/img/vim/hjkl.gif" alt="running"></p><p>数字搭配命令使用，快乐加倍。<br><code>{count}{command}</code></p><h3 id="快速移动"><a href="#快速移动" class="headerlink" title="快速移动"></a>快速移动</h3><p>单词之间移动<br>Vim 中的一个单词是</p><ul><li>字母和数字组成 （w、e、b、ge）</li><li>其他非空白字符序列 (W、E、B、GE)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello vim world</span><br><span class="line">HelloVimWorld()&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>w</code> 移动至下个单词开头</li><li><code>e(end)</code> 移动至下个单词结尾 end</li><li><code>b(back)</code> 移动至上个单词开头 back</li><li><code>ge</code> 移动至上个单词末尾</li><li><code>gE</code></li></ul><p>以上命令还可大写，大小写的区别在于单词的范围不同。</p><ul><li>小写只由字母组成的单词</li><li>大写是以非空白符分割的单词</li></ul><p><code>{n}w/e/b/ge/gE</code> 跳转第几个单词</p><p><img src="/img/vim/w.gif" alt="running"></p><hr><p>行间搜索移动</p><ul><li><code>f{character}</code> 移至行中下一个出现的字符</li><li><code>F{character}</code> 移至行中上一个出现的字符</li><li><code>t{character}</code> 移至行中下一个出现的字符前</li><li><code>T{character}</code> 移至行中上一个出现的字符后</li></ul><p>重复查找上次的搜索命令，避免再次输入。</p><ul><li><code>;</code> 下一个</li><li><code>,</code> 上一个</li><li><code>{n};</code> 第 n 个</li></ul><p><img src="/img/vim/f.gif" alt="running"></p><hr><p>水平移动</p><ul><li><code>0</code> 移至行首</li><li><code>^</code> 移至行首的非空白字符</li><li><code>$</code> 移至行尾</li><li><code>g_</code> 移至行尾的非空白字符</li></ul><p><img src="/img/vim/0.gif" alt="running"></p><hr><p>垂直移动</p><ul><li><code>(</code> 上个句子</li><li><code>)</code> 下个句子</li><li><code>{</code> 上个段落</li><li><code>}</code> 下个段落</li><li><code>%</code> 移动光标到括号的另一半包括 () [] {}</li></ul><p>段落和句子都是以空行来分割。</p><p><img src="/img/vim/percent.gif" alt="running"></p><hr><p>页面移动</p><ul><li><code>gg</code> 第一行</li><li><code>G</code> 最后一行</li><li><code>{n}gg/{n}G</code> 移动到第 n 行</li><li><code>H(head)</code> 移动到屏幕顶部</li><li><code>M(middle)</code> 移动到屏幕中间</li><li><code>L(lower)</code> 移动到屏幕低部</li><li><code>zz</code> 当前行放到屏幕中间</li></ul><p><img src="/img/vim/gg.gif" alt="running"></p><hr><p>语义移动</p><ul><li><code>gd</code> 跳转到定义</li><li><code>gf</code> 跳转到导入的源文件</li><li><code>gh</code> 相当于将鼠标悬停在光标所在的位置。</li></ul><p><img src="/img/vim/gd.gif" alt="running"></p><h1 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h1><p>文本对象可以理解为范围，hjkl 移动是以一个字符为单位移动。<br>使用文本对象可以更大范围的移动操作</p><ul><li><code>w</code> 单词</li><li><code>s</code> 句子</li><li><code>p</code> 段落</li><li><code>(</code> 被 { 包围的块</li><li><code>{</code> 被 ( 包围的块</li><li><code>&#39;</code> 被 ‘ 包围的块</li><li><code>&quot;</code> 被 “ 包围的块</li><li><code>t</code> 被 html 标签包围的块</li></ul><h3 id="快速删除"><a href="#快速删除" class="headerlink" title="快速删除"></a>快速删除</h3><p>d (delete)</p><ul><li><code>dd</code> 删除当前行</li><li><code>{n}dd</code> 删除 n 行</li><li><code>df{character}</code> 从当前字符向后删除到目标字符</li><li><code>dF{character}</code> 从当前字符向前删除到目标字符</li><li><code>dt{character}</code> 从当前字符向后删除到目标字符前</li><li><code>dT{character}</code> 从当前字符向前删除到目标字符后</li><li><code>x</code> 删除一个字符</li><li><code>{n}x</code> 删除 n 个字符</li></ul><p>配合水平移动删除</p><ul><li><code>d$ = D</code> 从当前字符删除到行尾</li><li><code>d0</code> 从当前字符删除到行尾</li></ul><p>配合文本对象删除</p><ul><li><code>dw</code> 从光标向后删除单词</li><li><code>db</code> 从光标向前删除单词</li><li><code>daw</code> 删除当前单词包含单词后的空格</li><li><code>diw</code> 删除当前单词</li><li><code>dat</code></li><li><code>dit</code></li><li><code>da(</code></li><li><code>di(</code></li><li><code>da{</code></li><li><code>di{</code></li><li><code>da&quot;</code></li><li><code>di&quot;</code></li><li><code>da&#39;</code></li><li><code>di&#39;</code></li></ul><p>i(inner) 当前文本对象的全部内容<br>a(around) 当前文本对象的全部内容加内容后面的空格</p><h3 id="快速修改"><a href="#快速修改" class="headerlink" title="快速修改"></a>快速修改</h3><ul><li><code>r(replace)</code> 替一个字符</li><li><code>s</code> 删除当前字符进入到 insert 模式</li><li><code>S</code> 删除当前行字符进入到 insert 模式</li></ul><p>c (change)<br>c(change) 与 d(delete) 命令类似，可是把上面操作中的 d 换成 c。只是 c 操作后会进入到 insert 模式</p><p>C 删除到行尾进入 insert 模式<br>s substitute<br>,1 ,2,3</p><p>S<br>C 删除到行尾<br>：<br>4s<br>c2w<br>cw caw  ciw<br>dw daw</p><h2 id="Command-模式"><a href="#Command-模式" class="headerlink" title="Command 模式"></a>Command 模式</h2><p>:w<br>:q<br>:wq<br>:vs<br>:sp</p><h2 id="Visual-模式"><a href="#Visual-模式" class="headerlink" title="Visual 模式"></a>Visual 模式</h2><ul><li>normal 模式下使用 v 进入 visual 选择</li><li>V 选择行</li><li>Ctrl + v 块选择<br>o 切换方向</li></ul><p>d 删除</p><h2 id="insert-模式"><a href="#insert-模式" class="headerlink" title="insert 模式"></a>insert 模式</h2><ul><li><code>ctrl h</code> 删除上一个字符</li><li><code>ctrl w</code> 删除上一个单词</li><li><code>ctrl u</code> 删除当前行</li><li><code>ctrl a</code> 移动到行首</li><li><code>ctrl e</code> 移动到行尾</li><li><code>ctrl b</code> 向前移动</li><li><code>ctrl f</code> 向后移动</li></ul><p>终端中也可以使用</p><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>vim 操作的是寄存器而不是系统剪贴板<br>Vim 的删除、复制与粘贴命令均需要使用 Vim 寄存器。通过在命令前加 “寄存器名 前缀的方式可指定寄存器，否则 Vim 将缺省使用无名寄存器。若想在 Vim 和操作系统外部程序间共享复制内容，则必须使用 Vim 系统剪贴板。</p><p>默认使用「无名寄存器」””p === p<br>:reg name 查看寄存器内容<br>xp 删除粘贴</p><p>有名寄存器 a-z<br>Vim 提供了一组以 26 个英文字母命名的有名寄存器。用小写字母引用有名寄存器会覆盖该寄存器的原有内容，而用大写字母引用则会将新内容 追加 到该寄存器的原有内容之后。</p><p>“{} 指定寄存器<br>“” 默认使用无名寄存器</p><p>“0 复制寄存器<br>“+ 系统剪贴板<br>“% 当前文件名<br>“. 上次插入的文本</p><h1 id="Vim-宏-marcro"><a href="#Vim-宏-marcro" class="headerlink" title="Vim 宏 marcro"></a>Vim 宏 marcro</h1><blockquote><p>可以看作是一些系列命令的集合，可以录制一系列操作然后用于「回放」</p></blockquote><p>(1) 在Vim命令行模式下，按下 :q寄存器名 后开始进入宏录制状态，vim编辑器左下角会显示”记录中”或”recording”</p><p>q 开始结束录制<br>录制保存在寄存器中<br>q{a} 保存在 a 寄存器中 @a 回放<br>@ 回放</p><h1 id="我使用-Vim-的几个阶段"><a href="#我使用-Vim-的几个阶段" class="headerlink" title="我使用 Vim 的几个阶段"></a>我使用 Vim 的几个阶段</h1><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li><code>xp</code> 交换两个字符位置</li><li><code>ddp</code> 上下行交换</li></ul><p>VS Code快速切换 Vim 开关<br><code>Ctrl + Shift + p</code> 打开命令面板输入 <code>Toggle Vim Mode</code></p><ul><li><code>.</code> 重复最后一次修改</li></ul><h2 id="Visual-Studio-Code-的-Vim-设置"><a href="#Visual-Studio-Code-的-Vim-设置" class="headerlink" title="Visual Studio Code 的 Vim 设置"></a>Visual Studio Code 的 Vim 设置</h2><p><a href="https://github.com/VSCodeVim/Vim#vscodevim-settings" target="_blank" rel="noopener">Vim 插件文档</a></p><h3 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h3><h3 id="Snake"><a href="#Snake" class="headerlink" title="Snake"></a>Snake</h3><h3 id="EasyMotion"><a href="#EasyMotion" class="headerlink" title="EasyMotion"></a>EasyMotion</h3><p>spance spance w 跳转<br><img src="https://cdn.nlark.com/yuque/0/2020/png/98581/1595852771272-24b8c12d-7282-4d62-9ce8-34fd49e86429.png#align=left&display=inline&height=540&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1080&originWidth=1265&size=121917&status=done&style=none&width=632.5" alt="image.png"></p><h2 id="Chrome-插件-Vimium"><a href="#Chrome-插件-Vimium" class="headerlink" title="Chrome 插件 Vimium"></a>Chrome 插件 Vimium</h2><p><a href="https://chrome.google.com/webstore/detail/dbepggeogbaibhgnhhndojpepiihcmeb" target="_blank" rel="noopener">Vimium</a> 提供了在浏览器上使用 Vim 功能</p><ul><li><code>j</code> 向下移动网页</li><li><code>k</code> 向上移动网页</li><li><code>gg</code> 移动到网页顶部</li><li><code>G</code> 移动到网页底部</li><li><code>J</code> 上一个标签页</li><li><code>K</code> 下一个标签页<br>…</li></ul><h1 id="让键盘适应工具"><a href="#让键盘适应工具" class="headerlink" title="让键盘适应工具"></a>让键盘适应工具</h1><p>可以选择 ESC 和 Ctrl 比较容易触碰的键盘，或者把 CapsLock 映射成 Ctrl。<br>根据自己需求选择</p><p>HHKB<br>Poker2<br>图片</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://vimjc.com/" target="_blank" rel="noopener">https://vimjc.com/</a><br><a href="https://github.com/VSCodeVim" target="_blank" rel="noopener">https://github.com/VSCodeVim</a><br><a href="https://coding.imooc.com/learn/list/50.html" target="_blank" rel="noopener">https://coding.imooc.com/learn/list/50.html</a><br><a href="https://www.zhihu.com/question/303850876" target="_blank" rel="noopener">https://www.zhihu.com/question/303850876</a><br><a href="https://www.barbarianmeetscoding.com/blog/2019/02/08/boost-your-coding-fu-with-vscode-and-vim" target="_blank" rel="noopener">https://www.barbarianmeetscoding.com/blog/2019/02/08/boost-your-coding-fu-with-vscode-and-vim</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Vim 是从 vi 发展出来的一个文本编辑器。和 Emacs 并列成为类 Unix 系统用户最喜欢
      
    
    </summary>
    
    
      <category term="编辑器" scheme="https://www.chengjingchao.com/categories/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="Vim" scheme="https://www.chengjingchao.com/tags/Vim/"/>
    
      <category term="编辑器" scheme="https://www.chengjingchao.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.chengjingchao.com/2020/06/01/hello-world/"/>
    <id>https://www.chengjingchao.com/2020/06/01/hello-world/</id>
    <published>2020-06-01T15:27:59.976Z</published>
    <updated>2020-06-01T15:57:35.680Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>

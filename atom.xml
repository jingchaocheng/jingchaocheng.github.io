<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingchao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.chengjingchao.com/"/>
  <updated>2021-09-07T15:36:38.437Z</updated>
  <id>https://www.chengjingchao.com/</id>
  
  <author>
    <name>Jingchao Cheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快捷切换 Windows 代理开关</title>
    <link href="https://www.chengjingchao.com/2021/09/07/%E5%BF%AB%E6%8D%B7%E5%88%87%E6%8D%A2-Windows-%E4%BB%A3%E7%90%86%E5%BC%80%E5%85%B3/"/>
    <id>https://www.chengjingchao.com/2021/09/07/%E5%BF%AB%E6%8D%B7%E5%88%87%E6%8D%A2-Windows-%E4%BB%A3%E7%90%86%E5%BC%80%E5%85%B3/</id>
    <published>2021-09-07T15:25:26.000Z</published>
    <updated>2021-09-07T15:36:38.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近给公司的 Window 电脑配置了代理<del>（为了科学上网）</del>。全局的系统代理会导致有些软件不能正常使用。就需要频繁的切换代理开关。步骤如下</p><p><code>设置 =&gt; 网络和 Internet =&gt; 代理 =&gt; 开/关</code></p><p><img src="/img/proxy/switch.png" alt="running"></p><p>有点太过繁琐，搜了下解决方法</p><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法 1"></a>解决方法 1</h2><p>先搜索到的<a href="https://www.computerworld.com/article/3218116/how-to-make-shortcuts-to-windows-10-settings-on-your-desktop.html" target="_blank" rel="noopener">这个</a>解决方案。<br>新建桌面快捷方式，</p><p><img src="/img/proxy/shortcut.png" alt="running"></p><p>下一步后起个名字完成即可。双击快捷方式即可直接打开代理设置。还是不太方便。</p><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法 2"></a>解决方法 2</h2><p><a href="https://stackoverflow.com/questions/26708347/windows-desktop-widget-to-turn-proxy-on-and-off/26708451#26708451" target="_blank" rel="noopener">使用快捷键直接切换代理开关</a><br>其实有其他作者已经把这个解决方案的实现上传到了 <code>GitHub</code>，可以直接<a href="https://github.com/ElectricRCAircraftGuy/Windows_Proxy_Toggler" target="_blank" rel="noopener">下载</a>使用</p><ol><li>下载</li><li>放到 <code>C:\Users\YOUR_USERNAME</code> 目录下</li><li>点击目录下的 <code>toggle_proxy_on_off.vbs</code> 会直接创建桌面快捷方式</li></ol><p>注意事项</p><ol><li>下载的文件目录名称是否为 <code>Windows_Proxy_Toggler</code></li><li>放在当前用户目录下</li></ol><p>这时可以点击桌面快捷方式直接切换代理开关</p><p>更进一步为快捷方式绑定快捷键（<code>右键桌面快捷方式 =&gt; 属性</code>）<br><img src="/img/proxy/key.png" alt="running"></p><p>这时会发现按下快捷键后会有 <code>3s</code> 左右的延迟，再次使用万能的 <code>Google</code>，将<code>设置 =&gt; 后台应用 =&gt; 设置</code> 关掉即可。</p><p><img src="/img/proxy/setting.png" alt="running"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://blog.csdn.net/qq_44275286/article/details/103988806" target="_blank" rel="noopener">https://blog.csdn.net/qq_44275286/article/details/103988806</a></li><li><a href="https://github.com/ElectricRCAircraftGuy/Windows_Proxy_Toggler" target="_blank" rel="noopener">https://github.com/ElectricRCAircraftGuy/Windows_Proxy_Toggler</a></li><li><a href="https://itectec.com/superuser/slow-windows-desktop-keyboard-shortcuts/" target="_blank" rel="noopener">https://itectec.com/superuser/slow-windows-desktop-keyboard-shortcuts/</a></li><li><a href="https://stackoverflow.com/questions/26708347/windows-desktop-widget-to-turn-proxy-on-and-off/26708451#26708451" target="_blank" rel="noopener">https://stackoverflow.com/questions/26708347/windows-desktop-widget-to-turn-proxy-on-and-off/26708451#26708451</a></li><li><a href="https://www.computerworld.com/article/3218116/how-to-make-shortcuts-to-windows-10-settings-on-your-desktop.html" target="_blank" rel="noopener">https://www.computerworld.com/article/3218116/how-to-make-shortcuts-to-windows-10-settings-on-your-desktop.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近给公司的 Window 电脑配置了代理&lt;del&gt;（为了科学上网）&lt;/del&gt;。全局的系统代理会导致有些软件不能正常使用。就需要频繁的切换
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 知识点整理</title>
    <link href="https://www.chengjingchao.com/2021/05/09/JavaScript-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>https://www.chengjingchao.com/2021/05/09/JavaScript-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</id>
    <published>2021-05-09T01:19:29.000Z</published>
    <updated>2021-05-15T05:11:28.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><blockquote><p>变量、函数、属性或函数参数的名称。</p></blockquote><h3 id="标识符规则"><a href="#标识符规则" class="headerlink" title="标识符规则"></a>标识符规则</h3><ol><li>首字符必须是 <strong>字母、下划线</strong> 或 <strong>$</strong></li><li>其他字符可以是 <strong>字母、下划线、$</strong> 或 <strong>数字</strong></li></ol><ul><li>区分大小写</li><li>关键字保留字不能作为标识符</li><li>标识符采用驼峰写法，第一个字母小写，剩下的每个单词的首字母大写</li></ul><hr><h1 id="严格模式-use-strict"><a href="#严格模式-use-strict" class="headerlink" title="严格模式 use strict"></a>严格模式 use strict</h1><blockquote><p>一种不同的 JS 解析和执行模型。</p></blockquote><ul><li>不规范的写法会被处理</li><li>不安全的会抛出错误</li></ul><p>整个 js 文件启用严格模式，在开头加上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br></pre></td></tr></table></figure><p>单独指定一个函数严格模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><blockquote><p>变量是松散类型，可以保存任何类型的数据</p></blockquote><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><ol><li><code>var</code></li><li><code>let</code></li><li><code>const</code></li></ol><blockquote><p>不初始化默认保存 undefined</p></blockquote><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><ul><li>变量提升（把变量声明放到作用域的顶部，初始化操作留在原处执行）</li><li>可以重复声明（变量提升会合为一个声明）</li><li>函数作用域（成为包含它的函数的局部变量）</li><li>全局变量会成为 window 对象的属性（可能会覆盖全局属性）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量提升</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age)</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age</span><br><span class="line">  <span class="built_in">console</span>.log(age)</span><br><span class="line">  age = <span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以重复声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">16</span></span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">26</span></span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">36</span></span><br><span class="line">  <span class="built_in">console</span>.log(age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// 36</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作用域</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">'hi'</span></span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="built_in">console</span>.log(message) <span class="comment">// ReferenceError: message is not defined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量会成为 window 对象的属性</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">'hi'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.message) <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>块作用域（函数内部或 {} 之间的区域）</li><li>同一个作用域禁止重复声明（作用域中已经存在某个标识符，再使用 let 声明会报错）</li><li>临时死区（在声明变量之前使用）</li><li>全局作用域中声明的变量不会成为 window 对象的属性</li><li>for 循环中的行为不一样（每次迭代时都会创建新的绑定）</li></ul><blockquote><p>块作用域：只在当前代码块内有效，执行到代码块外会立即销毁。</p></blockquote><blockquote><p>临时死区（Temporal Dead Zone）：与 var 不同，let 和 const 不会发生变量提升，如果在声明前访问这些变量，即使是 type of 也会触发引用错误。JS 引擎发现变量声明时，要么提升至作用域顶部（var），要么将声明放到 TDZ 中（let、const）。访问 TDZ 中的变量会触发运行时错误。只有执行过变量声明语句后，变量才会从 TDZ 中移出，方可正常访问。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 块作用域</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'jack'</span></span><br><span class="line">  <span class="built_in">console</span>.log(name) <span class="comment">// jack</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// jack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">26</span></span><br><span class="line">  <span class="built_in">console</span>.log(age) <span class="comment">// 26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">// ReferenceError: age is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能重复声明</span></span><br><span class="line"><span class="keyword">var</span> age</span><br><span class="line"><span class="keyword">let</span> age <span class="comment">// SyntaxError: Identifier 'age' has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂时性死区</span></span><br><span class="line"><span class="built_in">console</span>.log(age)</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line"></span><br><span class="line">循环里的每次迭代同时共享变量 i ，循环内部创建的函数全都保留了对相同变量的引用。</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> 循环中勇 <span class="keyword">let</span> 声明迭代变量时，JS 引擎在后台会为每一个迭代循环声明一个新的迭代变量。每个 setTimeout 引用的都是不同的变量实例。</span><br><span class="line">每次迭代循环都会创建一个新变量，并以之前迭代中同名变量的值将其初始化。</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const 基本与 let 相同。区别如下</p><ul><li>声明时必须初始化（赋值）</li><li>不能修改变量引用（可以修改对象内部属性）</li><li>在 for-in 或 for-of 循环中使用时与 let 一致</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ol><li>不使用 var</li><li>const 优先 let 次之（知道未来会修改变量时，再使用let。）</li></ol><hr><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>ssb nnu o</p><ol><li>String</li><li>Symbol</li><li>Boolean</li><li>Null</li><li>Number</li><li>Undefined</li><li>Object</li></ol><h2 id="type-of"><a href="#type-of" class="headerlink" title="type of"></a>type of</h2><p>typoe of 会返回下列字符串</p><ol><li>string</li><li>symbol</li><li>boolean</li><li>number</li><li>function</li><li>undefined</li><li>object 对象 或 null</li></ol><h2 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h2><p>var 或 let 声明了但没有初始化就相当于给变量赋值 undefined<br>不要显式初始化 undefined<br>typeof 未声明和未初始化的变量都返回 undefined<br>建议声明变量的同时进行初始化，这样当 type of 返回 undefined 时，就只当是变量尚未声明。</p><p>undefined 的意义就是区分空对象指针 null 和未初始化变量的区别。</p><h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><p>空对象指针<br>声明要保存对象的变量时，建议使用 null 初始化，这样检测是不是 null 就可以知道是否后来被重新赋值了</p><p>undefined 由 null 派生而来 null == undefined // true</p><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p>true false</p><p>Boolean() 可以转换任意数据类型，返回一个 boolean 值 if()<br>转换为 false 的值<br>false、’’、0、NaN、null、undefined</p><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li>Number()</li><li>parseInt()</li><li>parseFloat() 只解析十进制值</li></ol><p>Number() 是转型函数，可用于任何数据类型<br>后两个函数主要用于将字符串转换为数值。</p><p>Number()</p><ul><li>布尔值 =&gt; 1, 0</li><li>数值直接返回</li><li>null =&gt; 0</li><li>undefined =&gt; NaN</li><li>‘’ =&gt; 0</li><li>有效数字字符串返回数字，其他为 NaN</li></ul><p>parseInt(, 10)</p><ul><li>‘’ =&gt; NaN</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>字符串是不可变的，一旦创建值就不能修改。<br>要修改某个变量中的字符串值，必须先销毁原始字符串，然后将包含新值的另一个字符串保存到该变量。</p><h3 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h3><p>age.toString()</p><h1 id="基本引用类型"><a href="#基本引用类型" class="headerlink" title="基本引用类型"></a>基本引用类型</h1><p>构造函数就是用来创造新对象的函数<br>new 其实就是创建一个对象<br>new Date()</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>UTC 时间 保存 1970-01-01 至今所经过的毫秒数</p><h2 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h2><h2 id="原始值包装类型"><a href="#原始值包装类型" class="headerlink" title="原始值包装类型"></a>原始值包装类型</h2><ul><li>Boolean</li><li>Number</li><li>String</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=&quot;标识符&quot;&gt;&lt;/a&gt;标识符&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;变量、函数、属性或函数参数的名称。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;标识符规则&quot;&gt;&lt;a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>你不知道的 JavaScript（上）</title>
    <link href="https://www.chengjingchao.com/2021/03/14/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-JavaScript-%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://www.chengjingchao.com/2021/03/14/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-JavaScript-%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2021-03-14T00:35:35.000Z</published>
    <updated>2021-03-14T13:52:10.685Z</updated>
    
    <content type="html"><![CDATA[<p>这本书主要有两部分内容</p><ol><li>作用域和闭包</li><li>this 和原型对象</li></ol><p>之前看过一部分，这次再看一遍顺便整理笔记。</p><h1 id="作用域是什么"><a href="#作用域是什么" class="headerlink" title="作用域是什么"></a>作用域是什么</h1><p>作用域是一套规则，用来管理引擎如何查找变量。</p><p>引擎查找变量的两种方式</p><ol><li>LHS 查询 (查找变量的引用，赋值操作的目标)</li><li>RHS 查询（查找变量的值）</li></ol><p>作用域的分类</p><ol><li>全局作用域</li><li>函数作用域</li><li>块作用域</li></ol><h2 id="作用域嵌套"><a href="#作用域嵌套" class="headerlink" title="作用域嵌套"></a>作用域嵌套</h2><p>JavaScript 是一门编译语言。但与传统的编译语言不通，它不是提前编译的，编译结果也不能在系统中到处移植。</p><p>传统的解释和编译<br>解释执行：每次运行前解释器解释执行。<br>编译执行：编译成机器语言保存后，一次编译多次运行。</p><p>传统的编译步骤</p><ol><li>分词/词法分析  将代码分解成词法单元 var a = 2; =&gt; var、a、=、2、;</li><li>解析/语法分析  转换成由元素逐级嵌套所组成的代表程序语法结构的树。抽象语法书（AST）</li><li>代码生成  将 AST 转换为可执行代码</li></ol><p>JavaScript 在执行前都要进行编译（通常就在执行前）</p><p>作用域<br>作用域嵌套<br>词法作用域<br>函数作用域<br>块作用域</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这本书主要有两部分内容&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;作用域和闭包&lt;/li&gt;
&lt;li&gt;this 和原型对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之前看过一部分，这次再看一遍顺便整理笔记。&lt;/p&gt;
&lt;h1 id=&quot;作用域是什么&quot;&gt;&lt;a href=&quot;#作用域是什么&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="阅读笔记" scheme="https://www.chengjingchao.com/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://www.chengjingchao.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>写给大家看的设计书</title>
    <link href="https://www.chengjingchao.com/2021/03/08/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B9%A6/"/>
    <id>https://www.chengjingchao.com/2021/03/08/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B9%A6/</id>
    <published>2021-03-08T12:46:46.000Z</published>
    <updated>2021-03-14T00:38:35.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><blockquote><p>一旦能够说出什么东西的名字，就会很容易注意到它。</p></blockquote><p>4 大基本设计原则</p><ul><li>对比 —— 突出重点避免页面上元素太过相似（可以是字体、颜色、大小、线宽、形状、空间等方面的对比）</li><li>重复 —— 重复颜色、形状、材质、空间关系、线宽、字体、大小和图片等。增加条理性和统一性。</li><li>对齐 —— 不能随意安放。应当与页面上的另一个元素有某种视觉联系。清晰、精巧且清爽的外观。</li><li>亲密性 —— 彼此相关的项应当靠近，归组在一起。组织信息，减少混乱，为读者提供清晰的结构。</li></ul><h2 id="2-亲密性"><a href="#2-亲密性" class="headerlink" title="2. 亲密性"></a>2. 亲密性</h2><h2 id="3-对齐"><a href="#3-对齐" class="headerlink" title="3. 对齐"></a>3. 对齐</h2><h2 id="4-重复"><a href="#4-重复" class="headerlink" title="4. 重复"></a>4. 重复</h2><h2 id="5-对比"><a href="#5-对比" class="headerlink" title="5. 对比"></a>5. 对比</h2><h2 id="6-4-大基本原则复习"><a href="#6-4-大基本原则复习" class="headerlink" title="6. 4 大基本原则复习"></a>6. 4 大基本原则复习</h2><h2 id="7-颜色运用"><a href="#7-颜色运用" class="headerlink" title="7. 颜色运用"></a>7. 颜色运用</h2><p>色轮的基础是红、黄和蓝 3 种颜色。被称为三原色（无法创建的颜色，其他颜色可以通过混合颜色得到但是没有办法通过混合其他颜色来得到纯黄、纯红或纯蓝色）<br>三原色色轮</p><p>将色轮上相邻的颜色等量混合，就会得到三间色<br>黄 + 蓝 = 绿<br>黄 + 红 = 橙<br>蓝 + 红 = 绿</p><p>把上面色轮空白两边的颜色等量混合就会得到第三色</p><p>色轮的色彩应用</p><ul><li>互补</li><li>三色组</li><li>分裂互补三色组</li><li>类似色</li></ul><p>色轮上相对的颜色为互补色。一种作为主色，另一种用于强调</p><p>彼此等距的三种颜色通常会形成一个让人愉悦的三色组。</p><p>红黄蓝就是一种三色组也称为基色三色组。儿童产品通常都采用这种组合</p><p>另一种形式的三色组称为分裂互补三色组。从色轮一边选择一种颜色，再在色轮上找出它对面互补色两侧的颜色。</p><p>类似色组合由色轮上彼此相邻的颜色组成。不论是组合两种颜色还是三种颜色，他们都有相同的基础色，这就形成了一个协调的组合。用不同的亮色和暗色组合一组类似色</p><ul><li>色调就是纯色</li><li>向色调增加黑色就构成一个暗色</li><li>向色调增加白色就构成一个亮色</li></ul><p>单色<br>单色组合由一种色调（纯色）及其相应的多种亮色和暗色组成。</p><p>暖色与冷色<br>颜色往往要么是暖色（说明其中包含红色或黄色），要么是冷色（说明其中包含蓝色）。<br>冷色趋于做背景色，而暖色是趋进型。</p><h3 id="如何取舍"><a href="#如何取舍" class="headerlink" title="如何取舍"></a>如何取舍</h3><ol><li>项目是否有季节性？</li><li>官方色？</li><li>是否包含图片</li></ol><h2 id="8-更多提示与技巧"><a href="#8-更多提示与技巧" class="headerlink" title="8. 更多提示与技巧"></a>8. 更多提示与技巧</h2><h1 id="字体设计"><a href="#字体设计" class="headerlink" title="字体设计"></a>字体设计</h1><h2 id="9-字体的基本规则"><a href="#9-字体的基本规则" class="headerlink" title="9. 字体的基本规则"></a>9. 字体的基本规则</h2><h2 id="10-字体与人生"><a href="#10-字体与人生" class="headerlink" title="10. 字体与人生"></a>10. 字体与人生</h2><h2 id="11-字体类别"><a href="#11-字体类别" class="headerlink" title="11. 字体类别"></a>11. 字体类别</h2><ul><li>OldStyle (旧式体)</li><li>Modern (现代体)</li><li>Slab serif (粗衬线体)</li><li>Sans serif (无衬线体)</li><li>Script (手写体)</li><li>Descorative (花体)</li></ul><h2 id="12-字体对比"><a href="#12-字体对比" class="headerlink" title="12. 字体对比"></a>12. 字体对比</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计原则&quot;&gt;&lt;a href=&quot;#设计原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则&quot;&gt;&lt;/a&gt;设计原则&lt;/h1&gt;&lt;h2 id=&quot;1-引言&quot;&gt;&lt;a href=&quot;#1-引言&quot; class=&quot;headerlink&quot; title=&quot;1. 引言&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="阅读笔记" scheme="https://www.chengjingchao.com/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="设计" scheme="https://www.chengjingchao.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 配置 SSH 连接</title>
    <link href="https://www.chengjingchao.com/2021/01/20/GitHub-%E9%85%8D%E7%BD%AE-SSH-%E8%BF%9E%E6%8E%A5/"/>
    <id>https://www.chengjingchao.com/2021/01/20/GitHub-%E9%85%8D%E7%BD%AE-SSH-%E8%BF%9E%E6%8E%A5/</id>
    <published>2021-01-20T14:05:37.000Z</published>
    <updated>2021-01-20T14:21:43.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><p>Git 可以使用的 4 种协议</p><ol><li>HTTP 协议</li><li>SSH</li><li>本地协议</li><li>Git 协议</li></ol><p>普遍使用的则是 HTTP 和 SSH，说一说这两种方式的优缺点。</p><p><img src="/img/github-ssh/http_ssh.png" alt=""></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>优点</p><ul><li>相同 URL（同一个 URL，仓库地址、clone 和 push 都是相同地址 例如: GitHub 上的仓库）</li><li>使用简单（只在需要授权时提示输入用户名/密码）</li><li>既可以设置无授权匿名服务，也可以传输时授权和加密</li></ul><p>缺点</p><ul><li>架设 HTTP/S 协议会比 SSH 麻烦一些</li><li>授权比较麻烦（需要频繁输入账号密码，当然 Git 也提供有缓存功能）</li></ul><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>优点</p><ul><li>普遍（大多数服务器已支持 SSH 访问，即使没有也很容易架设）</li><li>安全（数据传输要经过授权和加密）</li><li>高效（传输尽量压缩数据）</li></ul><p>缺点</p><ul><li>不能匿名访问，不利于开源项目（即便只要读取数据，也要有通过 SSH 访问主机的权限）</li></ul><h1 id="使用-SSH"><a href="#使用-SSH" class="headerlink" title="使用 SSH"></a>使用 SSH</h1><p>SSH 密钥可以让用户无需输入密码即可登录到 SSH 服务器中。SSH 密钥总是成对出现（公钥和私钥）</p><p>使用流程</p><ol><li>生成密钥对</li><li>将生成的公钥添加到服务器</li><li>测试连接</li></ol><p>SSH 连接的时候，远程服务器向用户发送一段随机字符串，用户使用对应的私钥加密后，再发送到远程主机。<br>远程主机使用公钥进行解密，如果成功证明用户是可信的。这一过程不需要用户手动操作。</p><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure><p>选项</p><ul><li>-t 可选 指定加密算法，默认 RSA</li><li>-b 可选 生成密钥长度</li><li>-C 可选 添加密钥对的说明（你可以随便输入内容）</li><li>-f 可选 指定生成私钥文件名，不使用 -f 会在创建过程中会提示用户输入</li><li>-P 可选 指定 passphrase 使用私钥时的密码 passphrase 至少 5 个字符</li><li>-p 可选 修改 passphrase</li></ul><p>私钥默认名称为 id_ + 算法名称<br>私钥对应的公钥名称为 私钥文件名 + .pub</p><p><code>ssh-keygen</code> 不添加任何选项生成过程中<br>第一次提示用户输入是保存密钥的文件名，直接回车使用默认值。<br>第二次提示用户输入 passphrase ，passphrase 是一个密码（使用私钥时的密码，使用后会在每次 pull、push 等操作中验证 passphrase）不使用可直接回车。<br>第三次提示用书再次输入 passphrase。<br>完成后 <code>~/.ssh</code> 目录下会多出两个文件 <code>id_rsa</code>、<code>id_rsa.pub</code>。</p><h2 id="将生成的公钥添加到服务器"><a href="#将生成的公钥添加到服务器" class="headerlink" title="将生成的公钥添加到服务器"></a>将生成的公钥添加到服务器</h2><p>GitHub: <code>Settings</code> &gt; <code>SSH and GPG keys</code> &gt; <code>New SSH key</code><br>将上一步生成的 <code>.pub</code> 的公钥内容复制到 Key 中，Title 随便填，添加即可。</p><h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>公钥添加到 GitHub，可以使用 SSH 测试 GItHub 连接，没有问题会输出欢迎语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi jingchaocheng! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>如果出现了下面的问题 （<a href="https://docs.github.com/cn/github/authenticating-to-github/using-ssh-over-the-https-port" target="_blank" rel="noopener">了解更多</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:jingchaocheng/git.git</span><br><span class="line">Cloning into <span class="string">'git'</span>...</span><br><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>解决方法<br>在 <code>~/.ssh/</code> 目录下 <code>config</code>（如果没有新建一个）文件中添加下面内容后，再次测试链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><h1 id="同一设备多个-Git-托管服务"><a href="#同一设备多个-Git-托管服务" class="headerlink" title="同一设备多个 Git 托管服务"></a>同一设备多个 Git 托管服务</h1><p>场景：公司内工作开发使用 GitLab，自己瞎折腾用的 GitHub、Gitee（即便每个平台注册的邮箱号不同也可以）。</p><p>使用方法：将之前生成的公钥添加到各个 Git 托管服务中即可。</p><p>需注意各个平台上的用户名和邮箱是否和本地的 git config 中的内容一致，如需修改参考下面的配置用户信息。</p><h1 id="同一设备两个-GitHub-账号"><a href="#同一设备两个-GitHub-账号" class="headerlink" title="同一设备两个 GitHub 账号"></a>同一设备两个 GitHub 账号</h1><p>场景：有两个不同的 GitHub 账号，想在同一台电脑上使用。（同理可解决 两个 GitLab 账号、两个 Gitee 账号问题在同一设备使用的问题）。</p><p>公钥在同一个托管平台上具有唯一性，所以同一平台的多个账号不能使用同一公钥，这种情况需要生成多个密钥使用，每个账号对应一个密钥对。</p><p>在同一个平台上多个账号添加同一个公钥的错误提示<br><img src="/img/github-ssh/github.png" alt=""><br>GitHub<br><img src="/img/github-ssh/git-tree.png" alt=""><br>Gitee</p><p>再次生成一对密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f 996</span><br></pre></td></tr></table></figure><p>这个时候 ssh 目录下应该有两对密钥 4 个文件<br>新建 config 文件，添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 id_rsa 密钥的</span></span><br><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 996 密钥的</span></span><br><span class="line">Host 996</span><br><span class="line">Hostname sss.github.com</span><br><span class="line">IdentityFile ~/.ssh/996</span><br></pre></td></tr></table></figure><p>每个配置区段使用 <code>Host</code> 来区分， <code>IdentityFile</code> 指定<strong>私钥</strong>文件路径</p><p>将两个公钥的内容分别添加到两个账号的 <code>SSH keys</code> 中</p><p>使用 <code>config</code> 文件中第一个 <code>Host</code> 配置时和之前一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:jingchaocheng/git.git</span><br></pre></td></tr></table></figure><p>使用 <code>config</code> 文件中使用第二个 <code>Host</code> 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@996:996-vip/git.git</span><br><span class="line"><span class="comment"># 并非原来的 git@github.com:996-vip/git.git</span></span><br><span class="line"><span class="comment"># 需要将 github.com 修改成 第二个 host 配置的 996（可以自定义这个名字，一致就行）</span></span><br><span class="line"><span class="comment"># 996-vip 为 GitHub 用户名</span></span><br></pre></td></tr></table></figure><p><img src="/img/github-ssh/git_clone.png" alt=""></p><p>这样就完成了在同一设备同时使用两个 GitHub 账号的设置，记得配置 clone 仓库的用户信息。两个账号的用户信息必定不相同。</p><h1 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h1><p>Git 配置文件存储在三个不同位置，有相同配置时下级覆盖上级。</p><p><img src="/img/github-ssh/git_config.png" alt=""></p><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前用户</span></span><br><span class="line">git config --global user.name <span class="string">"你的用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"你的邮箱"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前仓库</span></span><br><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">"你的用户名"</span></span><br><span class="line">git config --<span class="built_in">local</span> user.email <span class="string">"你的邮箱"</span></span><br></pre></td></tr></table></figure><p>每一次 Git 的提交都会使用这些信息，并写入到每一次提交中。提交记录中的 Author 就是取的配置文件中的 <code>user.name</code> 和 <code>uesr.email</code>。所以都修改成当前仓库的 git config 的用户名和邮箱与目标托管平台中的用户名和邮箱一致即可。</p><h1 id="参考链接-🔗"><a href="#参考链接-🔗" class="headerlink" title="参考链接 🔗"></a>参考链接 🔗</h1><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></li><li><a href="https://www.cnblogs.com/ayseeing/p/3572582.html" target="_blank" rel="noopener">https://www.cnblogs.com/ayseeing/p/3572582.html</a></li><li><a href="https://www.cnblogs.com/ayseeing/p/4445194.html" target="_blank" rel="noopener">https://www.cnblogs.com/ayseeing/p/4445194.html</a></li><li><a href="https://daemon369.github.io/ssh/2015/03/08/generating-ssh-keys" target="_blank" rel="noopener">https://daemon369.github.io/ssh/2015/03/08/generating-ssh-keys</a></li><li><a href="https://docs.github.com/cn/github/authenticating-to-github/using-ssh-over-the-https-port" target="_blank" rel="noopener">https://docs.github.com/cn/github/authenticating-to-github/using-ssh-over-the-https-port</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;协议&quot;&gt;&lt;a href=&quot;#协议&quot; class=&quot;headerlink&quot; title=&quot;协议&quot;&gt;&lt;/a&gt;协议&lt;/h1&gt;&lt;p&gt;Git 可以使用的 4 种协议&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP 协议&lt;/li&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;li&gt;本地协议&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.chengjingchao.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.chengjingchao.com/tags/Git/"/>
    
      <category term="GitHub" scheme="https://www.chengjingchao.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>2020 年终总结</title>
    <link href="https://www.chengjingchao.com/2020/12/31/2020-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://www.chengjingchao.com/2020/12/31/2020-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-31T13:05:44.000Z</published>
    <updated>2020-12-31T15:39:20.193Z</updated>
    
    <content type="html"><![CDATA[<p>2020 年结束了，说起年终总结，每次打开别人的博客可能我最感兴趣的就是年终总结的文章了。可以看到他/她人这一年是如何度过的，也能了解到很多乐趣。可惜的是我自己从来却没写过。今年终于开始写博客了，便也想记录下自己这一年的一些生活琐碎。若干年后自己在看这些文字的时候，也许会很有意思。</p><p>今年最避不开的话题就是疫情了。1 月份的时候偶尔看到武汉华南海鲜市场的新闻，当时并没有太留意。1 月 19 过年回家中途路过武汉，在武汉火车站看到稀稀疏疏的几个人戴着口罩。20 日上午到家一切都还很平常，到 23 日武汉封城疫情大面积爆发。在家里度过了一个最特殊的春节。也是我自从出来参加工作后第一次这么长时间和家人待在一起。3 月 24 乘点对点大巴从襄阳回到深圳。</p><div style="display: flex; align-items: center;justify-content: space-between;">  <img src="/img/2020/2020-station.jpeg" width = "300"/>  <img src="/img/2020/2020-bus.jpeg" width = "300"/></div><h1 id="New-year’s-Resolution"><a href="#New-year’s-Resolution" class="headerlink" title="New year’s Resolution"></a>New year’s Resolution</h1><p>年初一次英语作业立的 Flag，算完成了一半吧。</p><ul><li><input disabled="" type="checkbox"> I will hard work.</li><li><input disabled="" type="checkbox"> I will read 10 books.</li><li><input checked="" disabled="" type="checkbox"> I will run at least once a week.s</li><li><input checked="" disabled="" type="checkbox"> I will learn Engliish and freestyle.</li><li><input checked="" disabled="" type="checkbox"> I will go to the gym at least three times a week.</li></ul><h1 id="业余爱好"><a href="#业余爱好" class="headerlink" title="业余爱好"></a>业余爱好</h1><ul><li>健身 - 从 3 月份来深圳后到 8、9 月份还有经常去。随着后面年卡快到期就没去了。只不过一日三餐都在外面吃，很难针对健身的需求来摄入食物。也许等以后自己做饭了还会重新启动。健身效果增重了快 20 斤吧。</li><li>游泳 - 今年的次数比去年少了一些，去年学会了蛙泳，自由泳今年有学不过至今还没有学会。</li><li>跑步 - 今年的跑步数据。<img src="/img/2020/2020-run.png" width = "300"/></li></ul><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>这一年换了工作部门，比之前忙了不少，还算有所收获。<br>回想当初刚学 CSS 的时候，学到 placeholder（之前都用 js 来实现相同效果）、border-radius 等一些很简单的属性的时候都能开心不已。或许参加工作后丢失了一些东西。希望新的一年自己也可以做出一些小玩意儿，给自己一些成就感，自己擅长的领域能有所沉淀。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今年的年终总结没什么内容可写。记录下此刻的感受。期待新的一年丰富自己。</p><p>希望新的一年家人身体健康！</p><p>2021 年的目标</p><ul><li><input disabled="" type="checkbox"> 学会自由泳</li><li><input disabled="" type="checkbox"> 继续坚持跑步，争取能跑一场马拉松（WuHan）</li><li><input disabled="" type="checkbox"> 每个月最少看一本技术相关的书</li><li><input disabled="" type="checkbox"> 学习完 ENGLISH GRAMMAR IN USE 两本书</li><li><input disabled="" type="checkbox"> 换<del><strong>**</strong></del></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2020 年结束了，说起年终总结，每次打开别人的博客可能我最感兴趣的就是年终总结的文章了。可以看到他/她人这一年是如何度过的，也能了解到很多乐趣。可惜的是我自己从来却没写过。今年终于开始写博客了，便也想记录下自己这一年的一些生活琐碎。若干年后自己在看这些文字的时候，也许会很
      
    
    </summary>
    
    
    
      <category term="生活" scheme="https://www.chengjingchao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="总结" scheme="https://www.chengjingchao.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Vue 组件选项和组合式 Api 对比</title>
    <link href="https://www.chengjingchao.com/2020/12/20/Vue-%E7%BB%84%E4%BB%B6%E9%80%89%E9%A1%B9%E5%92%8C%E7%BB%84%E5%90%88%E5%BC%8F-Api-%E5%AF%B9%E6%AF%94/"/>
    <id>https://www.chengjingchao.com/2020/12/20/Vue-%E7%BB%84%E4%BB%B6%E9%80%89%E9%A1%B9%E5%92%8C%E7%BB%84%E5%90%88%E5%BC%8F-Api-%E5%AF%B9%E6%AF%94/</id>
    <published>2020-12-20T06:56:02.000Z</published>
    <updated>2020-12-31T15:46:13.776Z</updated>
    
    <content type="html"><![CDATA[<p>整理 Vue 3.0 组件选项和 Composition API 的对比</p><h1 id="Composition-API-的优点"><a href="#Composition-API-的优点" class="headerlink" title="Composition API 的优点"></a>Composition API 的优点</h1><blockquote><ul><li>更好的逻辑复用与代码组织</li><li>更好的类型推导</li></ul></blockquote><h1 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    name: <span class="string">'Jack'</span>,</span><br><span class="line">    color: [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>],</span><br><span class="line">    grade: &#123;</span><br><span class="line">      art: <span class="number">90</span>,</span><br><span class="line">      math: <span class="number">90</span>,</span><br><span class="line">      english: <span class="number">90</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="keyword">this</span>.age = <span class="number">20</span></span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'Tom'</span></span><br><span class="line"><span class="comment">// vue2 中的修改 Object.defineProperty(grade, 'art', &#123; get() &#123;&#125;, set() &#123;&#125; &#125;) 需要提供具体的 key</span></span><br><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(this.color, 0, 'orange')</span><br><span class="line">this.$<span class="keyword">set</span>(this.grade, 'art', 100)</span><br><span class="line">// vue3 中的修改</span><br><span class="line">this.color[0] = 'orange'</span><br><span class="line">this.grade.art = 100</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * after</span><br><span class="line"> */</span><br><span class="line">setup () &#123;</span><br><span class="line">  <span class="keyword">const</span> age = ref(<span class="number">10</span>) <span class="comment">// new Proxy(&#123; value: 10 &#125;, &#123; get(target, key) &#123;&#125;, set(target, key, value) &#123;&#125; &#125;)</span></span><br><span class="line">  <span class="keyword">const</span> name = ref(<span class="string">'jack'</span>) <span class="comment">// new Proxy(&#123; value: 'jack' &#125;)</span></span><br><span class="line">  <span class="keyword">const</span> color = reactive([<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]) <span class="comment">// new Proxy(['red', 'blue', 'yellow'])</span></span><br><span class="line">  <span class="keyword">const</span> grade = reactive(&#123; <span class="attr">art</span>: <span class="number">90</span>, <span class="attr">math</span>: <span class="number">90</span>, <span class="attr">english</span>: <span class="number">90</span> &#125;) <span class="comment">// ne Proxy(&#123; art: 90, math: 90, english: 90 &#125;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改</span></span><br><span class="line">  age.value = <span class="number">20</span></span><br><span class="line">  name.value = <span class="string">'Tom'</span></span><br><span class="line">  color[<span class="number">0</span>] = <span class="string">'orange'</span></span><br><span class="line">  grade.art = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    age,</span><br><span class="line">    name,</span><br><span class="line">    color,</span><br><span class="line">    grade</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">props: [<span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">props: [<span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line">setup (props) &#123;</span><br><span class="line">  props.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="非-Prop-的-Attribute"><a href="#非-Prop-的-Attribute" class="headerlink" title="非 Prop 的 Attribute"></a>非 Prop 的 Attribute</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">this</span>.$attrs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setup (props, &#123; attrs &#125;) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">beforeCreate () &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">created () &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeMount () &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">mounted () &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeUpdate () &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">updated () &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeUnmount () &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">unmounted () &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUpmount, onMounted &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">setup () &#123;</span><br><span class="line">  onBeforeMount(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  onBeforeUpdate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  onUpdated(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  onBeforeUpmount(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  changeName () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setup () &#123;</span><br><span class="line">  <span class="keyword">const</span> changeName = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    changeName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="slots"><a href="#slots" class="headerlink" title="slots"></a>slots</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">this</span>.$slots</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setup (props, &#123; slots &#125;) &#123;</span><br><span class="line">  slots.default()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="string">'value'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setup(props, &#123; emit &#125;) &#123;</span><br><span class="line">  emit(<span class="string">'change'</span>, <span class="string">'value'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="provide"><a href="#provide" class="headerlink" title="provide"></a>provide</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// parent</span></span><br><span class="line">provide: &#123;</span><br><span class="line">  user: <span class="string">'Jack'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// child</span></span><br><span class="line">inject: [<span class="string">'user'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// parent</span></span><br><span class="line">setup () &#123;</span><br><span class="line">  <span class="keyword">const</span> name = ref(<span class="string">'Jack'</span>)</span><br><span class="line">  provide(<span class="string">'name'</span>, readonly(name))</span><br><span class="line">  provide(<span class="string">'changeName'</span>, (value) =&gt; &#123;</span><br><span class="line">    name.value = value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// child</span></span><br><span class="line">setup () &#123;</span><br><span class="line">  <span class="keyword">const</span> name = inject(<span class="string">'name'</span>)</span><br><span class="line">  <span class="keyword">const</span> changeName = injiect(<span class="string">'changeName'</span>)</span><br><span class="line">  changeName(<span class="string">'Tom'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  userName (newVal, oldVal) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">watch(nameObj, (oldVal, newVal) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watch(<span class="function"><span class="params">()</span> =&gt;</span> nameObj.name, (oldVal, newVal) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watch([<span class="function"><span class="params">()</span> =&gt;</span> nameObj.name, () =&gt; nameObj.englishName], ([newVal1, newVal2], [oldVal1, oldVal2]) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">watch(nameObj, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  immediate: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  getCount () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setup () &#123;</span><br><span class="line">  computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> count + <span class="number">5</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  computed(&#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123;</span><br><span class="line">      <span class="keyword">return</span> count</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> (value) &#123;</span><br><span class="line">      count.value = value + <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dom-ref"><a href="#Dom-ref" class="headerlink" title="Dom ref"></a>Dom ref</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"hello"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">this</span>.$refs.hello</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setup () &#123;</span><br><span class="line">  <span class="keyword">const</span> hello = ref(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    hello</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">setup () &#123;</span><br><span class="line">  <span class="keyword">const</span> store = useStore()</span><br><span class="line">  <span class="comment">// const name = store.state.name</span></span><br><span class="line">  <span class="keyword">const</span> &#123; name &#125; = toRefs(store.state)</span><br><span class="line">  store.dispatch(<span class="string">'changeName'</span>, <span class="string">'Tom'</span>)</span><br><span class="line">  store.commit(<span class="string">'changeName'</span>, <span class="string">'Tom'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理 Vue 3.0 组件选项和 Composition API 的对比&lt;/p&gt;
&lt;h1 id=&quot;Composition-API-的优点&quot;&gt;&lt;a href=&quot;#Composition-API-的优点&quot; class=&quot;headerlink&quot; title=&quot;Compositio
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://www.chengjingchao.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>写在连续跑步 99 周</title>
    <link href="https://www.chengjingchao.com/2020/07/27/%E5%86%99%E5%9C%A8%E8%BF%9E%E7%BB%AD%E8%B7%91%E6%AD%A5-99-%E5%91%A8/"/>
    <id>https://www.chengjingchao.com/2020/07/27/%E5%86%99%E5%9C%A8%E8%BF%9E%E7%BB%AD%E8%B7%91%E6%AD%A5-99-%E5%91%A8/</id>
    <published>2020-07-26T16:14:15.000Z</published>
    <updated>2021-09-07T15:30:18.730Z</updated>
    
    <content type="html"><![CDATA[<p>从 2018 年的第 36 周 - 2020 年的第 30 周，达成连续跑步 99 周悦跑圈成就。<br>基本可以代表我来深圳有多久了。</p><h1 id="我的跑步经历"><a href="#我的跑步经历" class="headerlink" title="我的跑步经历"></a>我的跑步经历</h1><p>从 2016 年 4 月 1 日，开始跑步并记录，至今差不多 4 年多了。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最开始为啥要跑步，应该是当时在学校和室友几个一起商量早上起早跑步，然后就跑起来了。商量好的明天跑步，结果你早上不想起来，也有人早上一起叫你，也就不好意思再继续睡了。有伴一起跑，也就不知不觉养成习惯了。当时的跑步路线基本都在学校操场 3 - 5km，周末可能会一起去学校旁边的一个景区跑远一点 10km。</p><p>第一次参加跑步活动<br><img src="/img/life/running2.jpg" alt="running"><br><img src="/img/life/running.jpg" alt="running"></p><p>中间有过一段时间的全勤，后来以为膝盖受伤就跑的很少了。<br><img src="/img/life/running4.jpg" alt="running"></p><p>后来 17 年去厦门工作，基本维持一周一次的跑步频率。</p><p>再后来到了深圳，找到工作后，就又开始跑起来了，达到连续跑步 20 多周的时候便开始在意保持下去。</p><p>18 年 8 月 24 第一次突破半马，中间跟着一个大哥跑了很久。（谢谢那位大哥）</p><p>19 年 8 月 - 9 月 开始健身，为了少做有氧，就减少了跑量，那一两个月每次只跑了 500 - 1000m 。</p><p>现在的跑步状态基本每次 10 km+</p><p>从最开始跑步到现在的数据记录<br><img src="/img/life/running3.jpg" width = "300"/></p><hr/><h1 id="跑步装备"><a href="#跑步装备" class="headerlink" title="跑步装备"></a>跑步装备</h1><p>装备基本就是鞋可能挑一点，衣服倒无所谓。最开始跑步就穿的运动鞋校服。后来买了两双跑鞋，我应该不算是个装备党。</p><p>我买过的两双跑鞋</p><ul><li>Asics GT-2000 6</li><li>Adidas UltraBOOST 4.0</li></ul><p>新手入门可以买各大品牌的基础款跑鞋，先跑起来。后面再根据自己情况选择注重竞速的还是缓震的等等。</p><p>也许今年会买个运动手表⌚️，到时候可以写个评测。</p><h1 id="跑步软件"><a href="#跑步软件" class="headerlink" title="跑步软件"></a>跑步软件</h1><p>我一直用的<a href="https://www.thejoyrun.com/" target="_blank" rel="noopener">悦跑圈</a>记录。</p><p>也还有许多类似的软件都可以记录</p><ul><li>咕咚</li><li>Keep</li><li>Nike Run Club</li></ul><hr/><h1 id="跑步路线"><a href="#跑步路线" class="headerlink" title="跑步路线"></a>跑步路线</h1><p>体育馆、公园、景区、人行道和学校操场都跑过，跑过最多的应该是操场。现在的运动类软件基本都有附近的跑步路线推荐。</p><p>操场的好处</p><ul><li>橡胶跑道</li><li>跑不动了还可以跟着别人后面再坚持坚持✊</li></ul><hr/><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>跑步对我来说并不感到痛苦，并且也算是可以最直接得到正向反馈的一种运动方式。一方面身体会分泌激素，另一方面今天的配速比昨天快一点/距离比昨天远一点等。都是特别直接的自我激励，有了持续的正向反馈，也就很容易坚持下去。</p><p>期待有机会突破 <strong>42.195</strong> 的那一天。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从 2018 年的第 36 周 - 2020 年的第 30 周，达成连续跑步 99 周悦跑圈成就。&lt;br&gt;基本可以代表我来深圳有多久了。&lt;/p&gt;
&lt;h1 id=&quot;我的跑步经历&quot;&gt;&lt;a href=&quot;#我的跑步经历&quot; class=&quot;headerlink&quot; title=&quot;我的跑步
      
    
    </summary>
    
    
      <category term="生活" scheme="https://www.chengjingchao.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://www.chengjingchao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="运动" scheme="https://www.chengjingchao.com/tags/%E8%BF%90%E5%8A%A8/"/>
    
      <category term="跑步" scheme="https://www.chengjingchao.com/tags/%E8%B7%91%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 与 Vim</title>
    <link href="https://www.chengjingchao.com/2020/06/13/VS-Code-%E4%B8%8E-Vim/"/>
    <id>https://www.chengjingchao.com/2020/06/13/VS-Code-%E4%B8%8E-Vim/</id>
    <published>2020-06-12T17:15:46.000Z</published>
    <updated>2020-08-03T16:56:19.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><blockquote><p>Vim 是从 vi 发展出来的一个文本编辑器。和 Emacs 并列成为类 Unix 系统用户最喜欢的编辑器。</p></blockquote><p><code>Vim</code> 提供了一系列很强大的编辑文本的操作方式，可以使用纯键盘完成编辑文本操作。再搭配许多插件可以配置成一个 IDE。但是 <code>Vim</code> 有着一个比较陡峭的学习曲线，并且不是开箱即用的。</p><p>如果没有特定的开发环境限制，可以使用</p><p>更漂亮易上手的编辑器 <code>(Visual Studio Code)</code> + 更流畅的编辑体验 <code>(Vim)</code></p><p>来提高编码效率，各取所长。</p><p>如今市面上几乎所有的 IDE 和编辑器都提供有 Vim 的相关插件。例如我所体验过的</p><ul><li>Sublime Text - <a href="https://github.com/guillermooo/Vintageous" target="_blank" rel="noopener">Vintageous</a>、<a href="https://github.com/guillermooo/Six" target="_blank" rel="noopener">Six</a></li><li>Visual Studio - <a href="https://github.com/VsVim/VsVim" target="_blank" rel="noopener">VsVim</a></li><li>Visual Studio Code - <a href="https://github.com/VSCodeVim/Vim" target="_blank" rel="noopener">Vim</a></li></ul><p>本文的所有操作都基于 <code>Visual Studio Code</code> +  <code>Vim 插件</code> 演示。(虽然我更喜欢 Sublime Text…)</p><hr><h1 id="先来点甜头-例子"><a href="#先来点甜头-例子" class="headerlink" title="先来点甜头 例子"></a>先来点甜头 例子</h1><p>举例几个实际例子，可以想像之前是怎么操作的</p><ol><li><p>字母顺序写反了 <code>ab</code> 写成了 <code>ba</code><br><img src="/img/vim/xp.gif" alt="running"></p></li><li><p>删除 HTML 元素中的内容 / 删除双引号之间的内容<br><img src="/img/vim/dit.gif" alt="running"></p></li></ol><p>…</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>打开 VS Code 的扩展商店</li><li>搜索 Vim</li><li>点击安装</li></ol><p><img src="/img/vim/vim-install.jpg" alt="running"></p><h1 id="Vim-模式"><a href="#Vim-模式" class="headerlink" title="Vim 模式"></a>Vim 模式</h1><p>模式意味着你的键盘会根据你所使用的模式获得不同的功能。也就是说，根据你所使用的模式，在键盘上键入一个按键会产生不同结果。</p><p>就像主键盘区上方的数字健可以直接按数字键 <code>1</code> 输入 1 也可以通过 <code>shift + 1</code> 输入 <code>！</code>，这样一个健位上就具有了不同的功能。</p><p>常用模式</p><ul><li><code>normal</code> 模式—— <strong>默认模式</strong>，可以通过键盘移动光标、删除字符、复制、粘贴等。</li><li><code>insert</code> 模式—— 正常的输入模式</li><li><code>visual</code> 模式—— 选中文本，类似通过鼠标选择文本</li></ul><p><code>Vim</code> 插件安装完成后，默认是 <code>normal</code> 模式，<code>normal</code> 模式下不能输入文本。按 <code>i</code> 键切换到 <code>insert</code> 模式。</p><p>如何判断编辑器当前所处模式</p><ul><li>通过光标样式判断</li><li>VS Code 底部 status 栏会显示当前模式</li></ul><p><img src="/img/vim/vscode-status.jpg" alt="running"></p><p>安装 Vim 后的副作用</p><ul><li><code>Ctrl + c</code> 不再是复制，而是切换到 <code>normal</code> 模式</li><li><code>Ctrl + v</code> 不再是粘贴，而是进入 <code>visual</code> 模式</li><li><code>Ctrl + f</code> 不再是搜索，而是向前滚动一页</li></ul><p>如果不希望 vim 改变这些健</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁用 vim 使用 Ctrl</span></span><br><span class="line"><span class="string">"vim.useCtrlKeys"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者更精细地控制 Vim 启用或禁用的映射，自行取舍。</span></span><br><span class="line"><span class="string">"vim.handleKeys"</span>: &#123;</span><br><span class="line">  <span class="string">"&lt;C-w&gt;"</span>: <span class="literal">false</span>, <span class="comment">// 禁用 Vim 使用 Ctrl w</span></span><br><span class="line">  <span class="string">"&lt;C-o&gt;"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"&lt;C-n&gt;"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tips: 禁用 Ctrl 键后，下面的 Vim 中包含 Ctrl 的操作将失效。</span><br></pre></td></tr></table></figure><h2 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h2><p>insert 切换 normal</p><ul><li><code>Esc</code></li><li><code>Ctrl + c</code></li><li><code>Ctrl + [</code></li></ul><p>normal 切换 insert</p><ul><li><code>i(insert)</code> 在当前字符前进入 <code>insert</code> 模式</li><li><code>a(append)</code> 在当前字符后进入 <code>insert</code> 模式</li><li><code>o(open)</code> 在当前行下开启新的一行进入 <code>insert</code> 模式</li><li><code>I</code> 在行首进入 <code>insert</code> 模式</li><li><code>A</code> 在行尾进入 <code>insert</code> 模式</li><li><code>O</code> 在当前行上开启新的一行进入 <code>insert</code> 模式</li><li><code>gi</code> 在最后一次 <code>insert</code> 的地方进入 <code>insert</code> 模式</li></ul><h2 id="normal-模式"><a href="#normal-模式" class="headerlink" title="normal 模式"></a>normal 模式</h2><p><code>normal</code> 模式下 <code>hjkl</code> 可以像键盘上的方向键一样上下左右移动光标而不是输入。<code>hjkl</code> 适用于短距离移动。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      ↑</span><br><span class="line">← h j k l →</span><br><span class="line">    ↓</span><br></pre></td></tr></table></figure><p><img src="/img/vim/hjkl.gif" alt="running"></p><p>数字搭配命令使用，快乐加倍。<br><code>{count}{command}</code></p><h3 id="快速移动"><a href="#快速移动" class="headerlink" title="快速移动"></a>快速移动</h3><p>单词之间移动<br>Vim 中的一个单词是</p><ul><li>字母和数字组成 （w、e、b、ge）</li><li>其他非空白字符序列 (W、E、B、GE)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello vim world</span><br><span class="line">HelloVimWorld()&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>w</code> 移动至下个单词开头</li><li><code>e(end)</code> 移动至下个单词结尾 end</li><li><code>b(back)</code> 移动至上个单词开头 back</li><li><code>ge</code> 移动至上个单词末尾</li><li><code>gE</code></li></ul><p>以上命令还可大写，大小写的区别在于单词的范围不同。</p><ul><li>小写只由字母组成的单词</li><li>大写是以非空白符分割的单词</li></ul><p><code>{n}w/e/b/ge/gE</code> 跳转第几个单词</p><p><img src="/img/vim/w.gif" alt="running"></p><hr><p>行间搜索移动</p><ul><li><code>f{character}</code> 移至行中下一个出现的字符</li><li><code>F{character}</code> 移至行中上一个出现的字符</li><li><code>t{character}</code> 移至行中下一个出现的字符前</li><li><code>T{character}</code> 移至行中上一个出现的字符后</li></ul><p>重复查找上次的搜索命令，避免再次输入。</p><ul><li><code>;</code> 下一个</li><li><code>,</code> 上一个</li><li><code>{n};</code> 第 n 个</li></ul><p><img src="/img/vim/f.gif" alt="running"></p><hr><p>水平移动</p><ul><li><code>0</code> 移至行首</li><li><code>^</code> 移至行首的非空白字符</li><li><code>$</code> 移至行尾</li><li><code>g_</code> 移至行尾的非空白字符</li></ul><p><img src="/img/vim/0.gif" alt="running"></p><hr><p>垂直移动</p><ul><li><code>(</code> 上个句子</li><li><code>)</code> 下个句子</li><li><code>{</code> 上个段落</li><li><code>}</code> 下个段落</li><li><code>%</code> 移动光标到括号的另一半包括 () [] {}</li></ul><p>段落和句子都是以空行来分割。</p><p><img src="/img/vim/percent.gif" alt="running"></p><hr><p>页面移动</p><ul><li><code>gg</code> 第一行</li><li><code>G</code> 最后一行</li><li><code>{n}gg/{n}G</code> 移动到第 n 行</li><li><code>H(head)</code> 移动到屏幕顶部</li><li><code>M(middle)</code> 移动到屏幕中间</li><li><code>L(lower)</code> 移动到屏幕低部</li><li><code>zz</code> 当前行放到屏幕中间</li></ul><p><img src="/img/vim/gg.gif" alt="running"></p><hr><p>语义移动</p><ul><li><code>gd</code> 跳转到定义</li><li><code>gf</code> 跳转到导入的源文件</li><li><code>gh</code> 相当于将鼠标悬停在光标所在的位置。</li></ul><p><img src="/img/vim/gd.gif" alt="running"></p><h1 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h1><p>文本对象可以理解为范围，hjkl 移动是以一个字符为单位移动。<br>使用文本对象可以更大范围的移动操作</p><ul><li><code>w</code> 单词</li><li><code>s</code> 句子</li><li><code>p</code> 段落</li><li><code>(</code> 被 { 包围的块</li><li><code>{</code> 被 ( 包围的块</li><li><code>&#39;</code> 被 ‘ 包围的块</li><li><code>&quot;</code> 被 “ 包围的块</li><li><code>t</code> 被 html 标签包围的块</li></ul><h3 id="快速删除"><a href="#快速删除" class="headerlink" title="快速删除"></a>快速删除</h3><p>d (delete)</p><ul><li><code>dd</code> 删除当前行</li><li><code>{n}dd</code> 删除 n 行</li><li><code>df{character}</code> 从当前字符向后删除到目标字符</li><li><code>dF{character}</code> 从当前字符向前删除到目标字符</li><li><code>dt{character}</code> 从当前字符向后删除到目标字符前</li><li><code>dT{character}</code> 从当前字符向前删除到目标字符后</li><li><code>x = dl</code> 删除一个字符</li><li><code>X = dh</code> 删除前一个字符</li><li><code>{n}x</code> 删除 n 个字符</li></ul><p> 配合水平移动删除</p><ul><li><code>d^</code> 从当前字符删除到行首</li><li><code>d0</code> 从当前字符删除到行首</li><li><code>d$ = D</code> 从当前字符删除到行尾</li><li><code>dg_</code> 从当前字符删除到行尾</li></ul><p>配合文本对象删除</p><ul><li><code>dw</code> 从光标向后删除单词</li><li><code>d{n}w</code> 从光标向后删除 n 个单词</li><li><code>d{n}aw</code> 从当前单词向后删除 n 个单词</li><li><code>db</code> 从光标向前删除单词</li><li><code>diw</code> 删除单词</li><li><code>daw</code> 删除单词 + 单词后的空格</li><li><code>dit</code> 删除 html 标签包裹的内容</li><li><code>dat</code> 删除 html 标签 + 包裹的内容</li><li><code>di(</code> 删除 () 包裹的内容</li><li><code>da(</code> 删除 () + 包裹的内容</li><li><code>di{</code> 删除 {} 包裹的内容</li><li><code>da{</code> 删除 {} + 包裹的内容</li><li><code>di&quot;</code> 删除 “” 包裹的内容</li><li><code>da&quot;</code> 删除 “” + 包裹的内容</li><li><code>di&#39;</code> 删除 ‘’ 包裹的内容</li><li><code>da&#39;</code> 删除 ‘’ + 包裹的内容</li></ul><p>i - inner<br>a - around</p><h3 id="快速修改"><a href="#快速修改" class="headerlink" title="快速修改"></a>快速修改</h3><p>r (replace)</p><ul><li><code>r</code> 替一个字符</li></ul><p>c (change)</p><ul><li>c 的命令基本可以把上面快速删除中的 d 都替换成 c。唯一区别是 c 最后会进入到 insert 模式。</li></ul><p>s</p><ul><li><code>s = ch</code> 删除光标下的字符并进入 insert 模式</li><li><code>{n}s</code> 删除 n 个字符并进入 insert 模式</li><li><code>S</code> 删除当前行并进入 insert 模式</li><li><code>~</code> 切换单个字符大小写</li><li><code>g~</code> 当前行所有字符字符切换大小写</li></ul><h2 id="Command-模式"><a href="#Command-模式" class="headerlink" title="Command 模式"></a>Command 模式</h2><p>VS Code 只支持部分 Vim 的 command 命令。<br>运行命令以 : 开头</p><ul><li><code>:edit {relative-path-to-file} = :e {path}</code> 打开或创建文件 建议创建文件使用，打开文件使用 Ctrl + p<br>相对路径是相对的当前打开文件。</li></ul><p>保存和关闭文件</p><ul><li><code>:write = :w</code> 保存文件</li><li><code>:quit = :q</code> 关闭文件</li><li><code>:wq</code> 保存并关闭</li></ul><p>如果文件未更改或为只读则将失败。同样，:quit将关闭文件，但如果文件未保存的更改将失败。<br>后面加 ! 强制执行</p><ul><li><code>:wall = :wa</code> 保存所有文件</li><li><code>:qall = :qa</code> 关闭所有文件</li><li><code>:wqall = :wqa</code> 保存和关闭所有文件</li><li><code>:qall! = :qa!</code> 关闭所有文件不保存</li></ul><p>删除/修改/复制 d c y<br><code>:[range]command[options]</code></p><ul><li><code>:[range]delete [register]</code> 删除多行到寄存器</li><li><code>·@:</code> 重复上一个ex命令</li><li><code>·@@</code> 重复一次后，您可以继续重复此操作</li></ul><p>command 模式范围<br>:{start},{end} 起始行到结束行 1,2d<br>:{start},{offset} 起始行和偏移范围 1,+2d</p><ul><li><code>.</code> 当前行 .,+2d</li><li><code>%</code> 整个文件 %d</li><li><code>0</code> 文件开头 0,10d</li><li><code>$</code> 文件结尾 10,$d</li><li><code>:&#39;&lt;,&#39;&gt;</code></li></ul><h3 id="command-替换"><a href="#command-替换" class="headerlink" title="command 替换"></a>command 替换</h3><p><code>:[range]s/{pattern}/{substitute}/{flags}</code></p><ul><li><code>range</code> 范围</li><li><code>s/</code> 当前行</li><li><code>%s</code> 整个文件</li><li><code>pattern</code> 搜索模式 支持正则</li><li><code>substitute</code> 要替换的文本</li><li><code>flags</code> 选项<ul><li><code>-g</code> 全局</li><li><code>-i</code> 不区分大小写</li><li><code>-c</code> 确认每一次替换</li></ul></li><li><code>:s/led/gold</code> 当前行第一个 led =&gt; gold</li><li><code>:s/led/gold/g</code> 全局</li></ul><h3 id="command-模式搜索"><a href="#command-模式搜索" class="headerlink" title="command 模式搜索"></a>command 模式搜索</h3><p>搜索以 / 或 ？ 开头</p><ul><li><code>/{pattern}</code> 向后搜索 pattern 是个正则表达式</li><li><code>?{pattern}</code> 向前搜索</li><li><code>/ = n</code> 下一个匹配项 重复搜索</li><li><code>？= N</code> 上一个匹配项</li><li><code>gn</code> 选中下一个匹配项</li><li><code>gN</code> 选中上一个匹配项</li><li><code>dgn</code> 删除下一个匹配项</li><li><code>dgN</code> 删除上一个匹配项</li></ul><h2 id="Visual-模式"><a href="#Visual-模式" class="headerlink" title="Visual 模式"></a>Visual 模式</h2><blockquote><p>Visual 模式相当于用鼠标选择文本，但是在 Vim 中你可以用键盘来完成。</p></blockquote><ul><li><code>v</code> 逐字符选择文本</li><li><code>V</code> 逐行选择文本</li><li><code>Ctrl + v</code> 使用矩形块选择文本</li><li><code>o</code> 切换选择方向</li><li><code>d</code> 删除</li></ul><h2 id="insert-模式"><a href="#insert-模式" class="headerlink" title="insert 模式"></a>insert 模式</h2><ul><li><code>ctrl h</code> 删除上一个字符</li><li><code>ctrl w</code> 删除上一个单词</li><li><code>ctrl u</code> 删除当前行</li><li><code>ctrl a</code> 移动到行首</li><li><code>ctrl e</code> 移动到行尾</li><li><code>ctrl b</code> 向前移动</li><li><code>ctrl f</code> 向后移动</li></ul><p>终端中也可以使用</p><h1 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h1><p>在 Vim 中</p><ul><li><code>y</code> 复制</li><li><code>Y</code> 复制当前行</li><li><code>p</code> 在当前字符后粘贴</li><li><code>p</code> 在当前字符前粘贴</li><li><code>yyp</code> 重复当前行</li><li><code>ddp</code> 交换上下行</li><li><code>xp</code> 交换字符</li><li><code>yl</code> 复制当前字符</li></ul><p>配合文本对象使用</p><ul><li><code>yaw</code> 复制一个单词</li><li><code>yas</code> 复制一个单词</li><li><code>yi(</code></li><li><code>yip</code></li><li><code>yap</code></li></ul><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器是一个特殊的剪贴板，你可以选择在其中一次保存多个内容。就像有很多盒子，你可以自由的选择将复制、删除的内容放在哪个盒子中，需要的时候可以自由拿出来(粘贴)。Vim 的删除、复制与粘贴命令均需要使用 Vim 寄存器。</p><p>通过在命令前加 <code>&quot;寄存器名</code> 前缀的方式可指定寄存器，否则 Vim 将缺省使用无名寄存器。</p><p>若想在 Vim 和操作系统外部程序间共享复制内容，则必须使用 Vim 系统剪贴板。</p><ul><li><code>&quot;&quot;</code> 无名寄存器 默认使用「无名寄存器」<code>&quot;&quot;p === p</code></li><li><code>&quot;[a-z]</code> 有名寄存器，以 26 个英文字母命名，使用小写字母引用有名寄存器会覆盖该寄存器的原有内容，而用大写字母引用则会将新内容 追加 到该寄存器的原有内容之后。</li></ul><p>特殊寄存器</p><ul><li><code>&quot;0</code> 复制寄存器</li><li><code>&quot;+</code> 系统剪贴板</li><li><code>&quot;%</code> 当前文件名</li><li><code>&quot;.</code> 上次插入的文本</li><li><code>&quot;[1-9]</code> 存储最后 9 次删除或更改命令的内容</li><li><code>:reg {name}</code> 查看寄存器内容</li></ul><h1 id="Vim-宏-marcro）"><a href="#Vim-宏-marcro）" class="headerlink" title="Vim 宏 (marcro）"></a>Vim 宏 (marcro）</h1><blockquote><p>可以看作是一些系列命令的集合，可以录制一系列操作然后用于「回放」</p></blockquote><p>在 normal 模式下，按下 <code>q{register}</code> 后开始进入宏录制状态，<code>VS Code</code> 编辑器左下角会显示 <code>Recording</code></p><ul><li><code>q{register}</code> 开始录制 再按 <code>q</code> 结束录制 录制保存在寄存器中</li><li><code>@a</code> 回放保存在 <code>a</code> 寄存器中的操作</li><li><code>@@</code> 重复上次回放</li><li><code>{n}@{register}</code></li></ul><p>Example</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rusty sword,obsidian dagger,silver poniard,broadsword 转换成</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>rusty sword<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>obsidian sword<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>silver poniard<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>broadsword poniard<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>VS Code 中内置了许多有用的 Vim <a href="https://github.com/VSCodeVim/Vim#-emulated-plugins" target="_blank" rel="noopener">插件</a>。</p><h2 id="vim-suround"><a href="#vim-suround" class="headerlink" title="vim-suround"></a>vim-suround</h2><p>默认启用</p><ul><li><code>ds</code> 删除</li><li><code>cs</code> 更改</li><li><code>ys</code> 添加</li></ul><p>Example</p><ul><li><code>ds&#39;</code> 删除周围的 <code>&#39;</code></li><li><code>ds(</code></li><li><code>ds[</code></li><li><code>ds{</code></li><li><code>cs&quot;&#39;</code> 把 <code>&quot;</code> 改成 <code>&#39;</code></li></ul><h2 id="vim-sneak"><a href="#vim-sneak" class="headerlink" title="vim-sneak"></a>vim-sneak</h2><p>默认禁用，setting.json 中 <code>vim.sneak: true</code> 开启。</p><ul><li><code>s{char}{char}</code> 类似 f 命令，不过现在 s 可以搜索两个字符更容易定位。</li><li><code>S{char}{char}</code> 向上搜索</li></ul><h2 id="Input-Method"><a href="#Input-Method" class="headerlink" title="Input Method"></a>Input Method</h2><p>在插入模式输入中文再进入到 normal 模式后，需要切换回英文输入法。<code>Input Method</code> 避免了这种问题。<br>使用方法参考 <a href="https://www.zhihu.com/question/303850876" target="_blank" rel="noopener">如何解决VSCode Vim中文输入法切换问题？</a></p><h2 id="vim-easymotion"><a href="#vim-easymotion" class="headerlink" title="vim-easymotion"></a>vim-easymotion</h2><p>默认禁用，setting.json 中 <code>vim.easymotion: true</code> 开启。</p><p>easymotion 试图通过消除记数来简化 Vim 中运动的使用。当使用 easymotion 时，它会使用叠加层（在相关文字上方）标识。输入该标识跳转过去。easymotion 适用于四处移动。</p><p>“vim.leader”: “space” 可以自行映射 leader 键盘。</p><ul><li><code>&lt;leader&gt;&lt;leader&gt;w</code> 标记后面所有单词的开头</li><li><code>&lt;leader&gt;&lt;leader&gt;b</code></li><li><code>&lt;leader&gt;&lt;leader&gt;bdw</code></li><li><code>&lt;leader&gt;&lt;leader&gt;e</code></li><li><code>&lt;leader&gt;&lt;leader&gt;ge</code></li><li><code>&lt;leader&gt;&lt;leader&gt;j</code></li><li><code>&lt;leader&gt;&lt;leader&gt;k</code></li><li><code>&lt;leader&gt;&lt;leader&gt;f{char}</code></li><li><code>&lt;leader&gt;&lt;leader&gt;F{char}</code></li><li><code>&lt;leader&gt;&lt;leader&gt;t{char}</code></li><li><code>&lt;leader&gt;&lt;leader&gt;T{char}</code></li><li><code>&lt;leader&gt;&lt;leader&gt;s{char}</code></li></ul><h1 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VS Code setting.json 中设置</span></span><br><span class="line"><span class="string">"editor.lineNumbers"</span>: <span class="string">"relative"</span>, <span class="comment">// 设置相对行号</span></span><br><span class="line"><span class="string">"vim.cursorStylePerMode.normal"</span>: <span class="string">"underline"</span>, <span class="comment">// 设置 normal 模式下光标为下划线</span></span><br><span class="line"><span class="string">"vim.leader"</span>: <span class="string">"&lt;Space&gt;"</span>, <span class="comment">// 自定义空格 leader 键 默认是 /</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义映射 使其更适应你的工作方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. insert 模式下输入 jj 进入到 normal 模式 jj =&gt; ESC</span></span><br><span class="line"><span class="string">"vim.insertModeKeyBindingsNonRecursive"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"before"</span>: [<span class="string">"j"</span>, <span class="string">"j"</span>],</span><br><span class="line">    <span class="string">"after"</span>: [<span class="string">"&lt;ESC&gt;"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 更快速的移动 normal 模式下 J =&gt; 5j，K =&gt; 5k</span></span><br><span class="line"><span class="string">"vim.normalModeKeyBindingsNonRecursive"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"before"</span>: [<span class="string">"J"</span>],</span><br><span class="line">    <span class="string">"after"</span>: [<span class="string">"5"</span>, <span class="string">"j"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"before"</span>: [<span class="string">"K"</span>],</span><br><span class="line">    <span class="string">"after"</span>: [<span class="string">"5"</span>, <span class="string">"k"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 映射到 VS Code 的命令 space + w =&gt; workbench.action.files.save</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"before"</span>: [<span class="string">"leader"</span>, <span class="string">"w"</span>],</span><br><span class="line">    <span class="string">"commands"</span>: [</span><br><span class="line">        <span class="string">"workbench.action.files.save"</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><a href="https://github.com/VSCodeVim/Vim#key-remapping" target="_blank" rel="noopener">VS Code Vim 有趣的映射</a></p><!-- 使Vim更加有效，重要的一点就是要牢记您的开发工作流程。时不时地重新访问Vim配置，并添加新的映射来增强您的工作方式。因此，从现在开始要注意，并保持您的Vim配置剃须刀锋利。 --><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li><code>Ctrl + Shift + p</code> 打开命令面板输入 <code>Toggle Vim Mode</code> 快速切换 Vim 开关</li><li><code>.</code> 重复最后一次修改</li><li><code>&gt;&gt;</code> 向右缩进</li><li><code>&lt;&lt;</code> 向左缩进</li><li><code>u</code> 撤销</li><li><code>*</code> 跳转到下一个相同单词</li><li><code>#</code> 跳转到上一个相同单词</li></ul><h2 id="Chrome-插件-Vimium"><a href="#Chrome-插件-Vimium" class="headerlink" title="Chrome 插件 Vimium"></a>Chrome 插件 Vimium</h2><p><a href="https://chrome.google.com/webstore/detail/dbepggeogbaibhgnhhndojpepiihcmeb" target="_blank" rel="noopener">Vimium</a> 提供了在浏览器上使用 Vim 功能</p><ul><li><code>j</code> 向下移动网页</li><li><code>k</code> 向上移动网页</li><li><code>gg</code> 移动到网页顶部</li><li><code>G</code> 移动到网页底部</li><li><code>J</code> 上一个标签页</li><li><code>K</code> 下一个标签页<br>…</li></ul><h1 id="让键盘适应工具"><a href="#让键盘适应工具" class="headerlink" title="让键盘适应工具"></a>让键盘适应工具</h1><p>可以选择 ESC 和 Ctrl 比较容易触碰的键盘，或者把 CapsLock 映射成 Ctrl。</p><p>⌨️</p><ul><li>HHKB</li><li>Poker2</li></ul><h1 id="我使用-Vim-几个阶段"><a href="#我使用-Vim-几个阶段" class="headerlink" title="我使用 Vim 几个阶段"></a>我使用 Vim 几个阶段</h1><p>从第一次接触到现在也有 3-4 年左右了吧。</p><ol><li>最开始在学校的时候看网上的一个视频课程，里面用的 <code>Sublime + Vim</code> 插件。算是我的 <code>Vim</code>启蒙。导致我到现在一直对 <code>Sublime Text</code> 情有独钟。当时基本只会 <code>hjkl dd gg p</code> 一些简单的操作。</li><li>学了文本对象，<code>f{char} t{char} d/c{文本对象}</code> 等 稍微熟练了些。</li><li>开始了解 <code>VS Code</code> 与 <code>Vim</code> 的搭配。不得不说 <code>VS Cod</code> 中的 <code>Vim</code> 比 <code>Sublime</code> 中的 <code>Vim</code>功能强大了不少。</li></ol><p>有时可能同时会有同事在我电脑上操作，会很不习惯。这种时候 <code>toggle vim mode</code> 就很好使了。</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>先挑选对自己有用的用到日常开发中，不要一口一个大胖子。<br><code>Vim</code> 实在是太强大了，写这篇文章时，也有很多是现学(抄)的，熟能生巧。<br><code>VS Code</code> 和 <code>Vim</code> 的结合会有一些功能重合或冲突的地方根据自己习惯取舍，最适合自己的就是最好的。</p><h1 id="参考链接-🔗"><a href="#参考链接-🔗" class="headerlink" title="参考链接 🔗"></a>参考链接 🔗</h1><p><a href="https://vimjc.com/" target="_blank" rel="noopener">https://vimjc.com/</a><br><a href="https://github.com/VSCodeVim" target="_blank" rel="noopener">https://github.com/VSCodeVim</a><br><a href="https://coding.imooc.com/learn/list/50.html" target="_blank" rel="noopener">https://coding.imooc.com/learn/list/50.html</a><br><a href="https://www.zhihu.com/question/303850876" target="_blank" rel="noopener">https://www.zhihu.com/question/303850876</a><br><a href="https://www.barbarianmeetscoding.com/blog/2019/02/08/boost-your-coding-fu-with-vscode-and-vim" target="_blank" rel="noopener">https://www.barbarianmeetscoding.com/blog/2019/02/08/boost-your-coding-fu-with-vscode-and-vim</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Vim 是从 vi 发展出来的一个文本编辑器。和 Emacs 并列成为类 Unix 系统用户最喜欢
      
    
    </summary>
    
    
      <category term="编辑器" scheme="https://www.chengjingchao.com/categories/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="Vim" scheme="https://www.chengjingchao.com/tags/Vim/"/>
    
      <category term="编辑器" scheme="https://www.chengjingchao.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.chengjingchao.com/2020/06/01/hello-world/"/>
    <id>https://www.chengjingchao.com/2020/06/01/hello-world/</id>
    <published>2020-06-01T15:27:59.976Z</published>
    <updated>2020-06-01T15:57:35.680Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
